// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frontend.proto

package frontend

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcessRequest struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessRequest) Reset()         { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()    {}
func (*ProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca3873955a29cfe, []int{0}
}

func (m *ProcessRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessRequest.Unmarshal(m, b)
}
func (m *ProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessRequest.Marshal(b, m, deterministic)
}
func (m *ProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessRequest.Merge(m, src)
}
func (m *ProcessRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessRequest.Size(m)
}
func (m *ProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessRequest proto.InternalMessageInfo

func (m *ProcessRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type ProcessReply struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessReply) Reset()         { *m = ProcessReply{} }
func (m *ProcessReply) String() string { return proto.CompactTextString(m) }
func (*ProcessReply) ProtoMessage()    {}
func (*ProcessReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca3873955a29cfe, []int{1}
}

func (m *ProcessReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessReply.Unmarshal(m, b)
}
func (m *ProcessReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessReply.Marshal(b, m, deterministic)
}
func (m *ProcessReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessReply.Merge(m, src)
}
func (m *ProcessReply) XXX_Size() int {
	return xxx_messageInfo_ProcessReply.Size(m)
}
func (m *ProcessReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessReply proto.InternalMessageInfo

func (m *ProcessReply) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessRequest)(nil), "frontend.ProcessRequest")
	proto.RegisterType((*ProcessReply)(nil), "frontend.ProcessReply")
}

func init() { proto.RegisterFile("frontend.proto", fileDescriptor_eca3873955a29cfe) }

var fileDescriptor_eca3873955a29cfe = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2b, 0xca, 0xcf,
	0x2b, 0x49, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xd4,
	0xb8, 0xf8, 0x02, 0x8a, 0xf2, 0x93, 0x53, 0x8b, 0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x44, 0xb8, 0x58, 0x33, 0xf3, 0x0a, 0x4a, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0x20, 0x1c, 0x25, 0x35, 0x2e, 0x1e, 0xb8, 0xba, 0x82, 0x9c, 0x4a, 0x21, 0x31, 0x2e, 0xb6, 0xfc,
	0xd2, 0x12, 0x84, 0x32, 0x28, 0xcf, 0xc8, 0x93, 0x8b, 0xc3, 0x0d, 0x6a, 0xb6, 0x90, 0x2d, 0x17,
	0x3b, 0x54, 0x8f, 0x90, 0x84, 0x1e, 0xdc, 0x05, 0xa8, 0xd6, 0x49, 0x89, 0x61, 0x91, 0x29, 0xc8,
	0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xb5,
	0x24, 0x19, 0xbd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessReply, error)
}

type frontendClient struct {
	cc *grpc.ClientConn
}

func NewFrontendClient(cc *grpc.ClientConn) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessReply, error) {
	out := new(ProcessReply)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServer is the server API for Frontend service.
type FrontendServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessReply, error)
}

// UnimplementedFrontendServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendServer struct {
}

func (*UnimplementedFrontendServer) Process(ctx context.Context, req *ProcessRequest) (*ProcessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}

func RegisterFrontendServer(s *grpc.Server, srv FrontendServer) {
	s.RegisterService(&_Frontend_serviceDesc, srv)
}

func _Frontend_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Frontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "frontend.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Frontend_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
